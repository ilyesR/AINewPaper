#!/usr/bin/env python3
"""
Script de v√©rification de la configuration avant d√©ploiement
"""

import os
import sys
from pathlib import Path

def check_mark(condition):
    return "‚úÖ" if condition else "‚ùå"

def main():
    print("=" * 80)
    print("üîç V√©rification de la configuration - AI News Paper API")
    print("=" * 80)
    print()
    
    all_checks_passed = True
    
    # 1. V√©rifier les fichiers essentiels
    print("üìÅ Fichiers essentiels:")
    required_files = [
        "api.py",
        "requirements.txt",
        "railway.toml",
        "Procfile",
        ".gitignore",
        "README.md"
    ]
    
    for file in required_files:
        exists = Path(file).exists()
        print(f"  {check_mark(exists)} {file}")
        if not exists:
            all_checks_passed = False
    print()
    
    # 2. V√©rifier les d√©pendances dans requirements.txt
    print("üì¶ D√©pendances:")
    if Path("requirements.txt").exists():
        with open("requirements.txt", "r") as f:
            requirements = f.read()
            deps = ["openai", "fastapi", "uvicorn", "pydantic"]
            for dep in deps:
                exists = dep in requirements
                print(f"  {check_mark(exists)} {dep}")
                if not exists:
                    all_checks_passed = False
    else:
        print("  ‚ùå requirements.txt non trouv√©")
        all_checks_passed = False
    print()
    
    # 3. V√©rifier les variables d'environnement
    print("üîê Variables d'environnement:")
    env_file = Path(".env")
    if env_file.exists():
        print(f"  ‚úÖ Fichier .env trouv√©")
        
        # Charger les variables
        with open(env_file, "r") as f:
            env_content = f.read()
            
        api_key_set = "OPENAI_API_KEY" in env_content and "sk-" in env_content
        print(f"  {check_mark(api_key_set)} OPENAI_API_KEY configur√©e")
        
        if not api_key_set:
            print("    ‚ö†Ô∏è  Assurez-vous d'avoir d√©fini votre cl√© API OpenAI dans .env")
            all_checks_passed = False
    else:
        print(f"  ‚ö†Ô∏è  Fichier .env non trouv√© (OK pour Railway, requis pour local)")
        print(f"    üí° Cr√©ez-le depuis .env.example pour tester en local")
    print()
    
    # 4. V√©rifier la structure du code
    print("üîß Structure du code:")
    if Path("api.py").exists():
        with open("api.py", "r") as f:
            api_content = f.read()
            
        checks = {
            "FastAPI import√©": "from fastapi import FastAPI" in api_content,
            "OpenAI import√©": "from openai import OpenAI" in api_content,
            "Endpoint /health": '@app.get("/health")' in api_content,
            "Endpoint /research": '/research' in api_content and '@app.post' in api_content,
            "Configuration PORT": 'os.getenv("PORT"' in api_content or 'os.getenv("OPENAI_API_KEY"' in api_content,
        }
        
        for check_name, passed in checks.items():
            print(f"  {check_mark(passed)} {check_name}")
            if not passed:
                all_checks_passed = False
    print()
    
    # 5. V√©rifier la configuration Railway
    print("üöÇ Configuration Railway:")
    if Path("railway.toml").exists():
        with open("railway.toml", "r") as f:
            railway_config = f.read()
            
        checks = {
            "startCommand d√©fini": "startCommand" in railway_config,
            "uvicorn configur√©": "uvicorn" in railway_config,
            "PORT variable utilis√©e": "$PORT" in railway_config,
        }
        
        for check_name, passed in checks.items():
            print(f"  {check_mark(passed)} {check_name}")
            if not passed:
                all_checks_passed = False
    else:
        print("  ‚ùå railway.toml non trouv√©")
        all_checks_passed = False
    print()
    
    # 6. V√©rifier .gitignore
    print("üõ°Ô∏è  S√©curit√©:")
    if Path(".gitignore").exists():
        with open(".gitignore", "r") as f:
            gitignore = f.read()
            
        checks = {
            ".env ignor√©": ".env" in gitignore,
            "outputs/ ignor√©": "outputs/" in gitignore,
            "__pycache__/ ignor√©": "__pycache__/" in gitignore,
        }
        
        for check_name, passed in checks.items():
            print(f"  {check_mark(passed)} {check_name}")
            if not passed:
                all_checks_passed = False
    else:
        print("  ‚ùå .gitignore non trouv√©")
        all_checks_passed = False
    print()
    
    # 7. V√©rifier qu'aucune cl√© API n'est dans le code
    print("üîí V√©rification des secrets:")
    sensitive_files = ["api.py", "main.py"]
    secrets_found = False
    
    for file in sensitive_files:
        if Path(file).exists():
            with open(file, "r") as f:
                content = f.read()
                if "sk-proj-" in content and 'os.getenv' not in content.split("sk-proj-")[1][:50]:
                    print(f"  ‚ö†Ô∏è  Cl√© API potentiellement expos√©e dans {file}")
                    secrets_found = True
    
    if not secrets_found:
        print(f"  ‚úÖ Aucune cl√© API hardcod√©e d√©tect√©e")
    else:
        print(f"  ‚ùå Cl√©s API trouv√©es dans le code - URGENT: les supprimer!")
        all_checks_passed = False
    print()
    
    # 8. V√©rifier les dossiers
    print("üìÇ Dossiers:")
    dirs = {
        "static/": "Interface web",
        "outputs/": "Stockage des r√©sultats (sera cr√©√© automatiquement)"
    }
    
    for dir_path, description in dirs.items():
        exists = Path(dir_path).exists()
        status = "‚úÖ" if exists else "‚ÑπÔ∏è "
        print(f"  {status} {dir_path} - {description}")
    print()
    
    # R√©sum√© final
    print("=" * 80)
    if all_checks_passed:
        print("‚úÖ TOUT EST PR√äT POUR LE D√âPLOIEMENT!")
        print()
        print("Prochaines √©tapes:")
        print("  1. Commitez vos changements: git add . && git commit -m 'Ready for deployment'")
        print("  2. Poussez vers GitHub: git push")
        print("  3. D√©ployez sur Railway depuis l'interface web")
        print("  4. Ajoutez OPENAI_API_KEY dans les variables Railway")
        print()
        return 0
    else:
        print("‚ùå CERTAINES V√âRIFICATIONS ONT √âCHOU√â")
        print()
        print("Veuillez corriger les probl√®mes ci-dessus avant de d√©ployer.")
        print()
        return 1

if __name__ == "__main__":
    sys.exit(main())

